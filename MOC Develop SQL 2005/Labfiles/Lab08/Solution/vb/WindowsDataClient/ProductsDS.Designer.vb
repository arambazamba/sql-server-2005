'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version:2.0.40426.20
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("ProductsDS")>  _
Partial Public Class ProductsDS
    Inherits System.Data.DataSet
    
    Private tableGetProducts As GetProductsDataTable
    
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("GetProducts")) Is Nothing) Then
                MyBase.Tables.Add(New GetProductsDataTable(ds.Tables("GetProducts")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false)>  _
    Public ReadOnly Property GetProducts() As GetProductsDataTable
        Get
            Return Me.tableGetProducts
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(false)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As ProductsDS = CType(MyBase.Clone,ProductsDS)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        Me.Reset
        Dim ds As System.Data.DataSet = New System.Data.DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("GetProducts")) Is Nothing) Then
            MyBase.Tables.Add(New GetProductsDataTable(ds.Tables("GetProducts")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableGetProducts = CType(MyBase.Tables("GetProducts"),GetProductsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGetProducts) Is Nothing) Then
                Me.tableGetProducts.InitVars
            End If
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "ProductsDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ProductsDS.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = false
        Me.tableGetProducts = New GetProductsDataTable
        MyBase.Tables.Add(Me.tableGetProducts)
        Me.ExtendedProperties.Add("DSGenerator_DataSetName", "ProductsDS")
        Me.ExtendedProperties.Add("User_DataSetName", "ProductsDS")
    End Sub
    
    Private Function ShouldSerializeGetProducts() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ProductsDS = New ProductsDS
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        If PublishLegacyWSDL Then
            Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
        Else
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(0)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            sequence.MaxOccurs = Decimal.MaxValue
            Dim attribute As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute.Name = "namespace"
            attribute.FixedValue = ds.Namespace
            type.Attributes.Add(attribute)
        End If
        type.Particle = sequence
        Return type
    End Function
    
    Protected Shared Function PublishLegacyWSDL() As Boolean
        Dim settings As System.Collections.Specialized.NameValueCollection = CType(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset"),System.Collections.Specialized.NameValueCollection)
        If (Not (settings) Is Nothing) Then
            Dim values() As String = settings.GetValues("WSDL_VERSION")
            If (Not (values) Is Nothing) Then
                Dim version As Single = Single.Parse(CType(values(0),String), CType(Nothing,System.IFormatProvider))
                Return (version < 2)
            End If
        End If
        Return true
    End Function
    
    Public Delegate Sub GetProductsRowChangeEventHandler(ByVal sender As Object, ByVal e As GetProductsRowChangeEvent)
    
    <System.Serializable(),  _
     System.Diagnostics.DebuggerStepThrough(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GetProductsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProductID As System.Data.DataColumn
        
        Private columnName As System.Data.DataColumn
        
        Private columnListPrice As System.Data.DataColumn
        
        Private m_suspendValidation As Boolean = false
        
        Public Sub New()
            MyBase.New
            Me.TableName = "GetProducts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Friend ReadOnly Property ProductIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProductID
            End Get
        End Property
        
        Friend ReadOnly Property NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        Friend ReadOnly Property ListPriceColumn() As System.Data.DataColumn
            Get
                Return Me.columnListPrice
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As GetProductsRow
            Get
                Return CType(Me.Rows(index),GetProductsRow)
            End Get
        End Property
        
        Public Property SuspendValidation() As Boolean
            Get
                Return Me.m_suspendValidation
            End Get
            Set
                Me.m_suspendValidation = value
            End Set
        End Property
        
        Public Event ProductIDChanging As ProductIDChangeEventHandler
        
        Public Event ProductIDChanged As ProductIDChangeEventHandler
        
        Public Event NameChanging As NameChangeEventHandler
        
        Public Event NameChanged As NameChangeEventHandler
        
        Public Event ListPriceChanging As ListPriceChangeEventHandler
        
        Public Event ListPriceChanged As ListPriceChangeEventHandler
        
        Public Event GetProductsRowChanged As GetProductsRowChangeEventHandler
        
        Public Event GetProductsRowChanging As GetProductsRowChangeEventHandler
        
        Public Event GetProductsRowDeleted As GetProductsRowChangeEventHandler
        
        Public Event GetProductsRowDeleting As GetProductsRowChangeEventHandler
        
        Protected Overrides Sub OnColumnChanging(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanging(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "ProductID") Then
                If (Not (Me.ProductIDChangingEvent) Is Nothing) Then
                    RaiseEvent ProductIDChanging(Me, New ProductIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Name") Then
                    If (Not (Me.NameChangingEvent) Is Nothing) Then
                        RaiseEvent NameChanging(Me, New NameChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "ListPrice") Then
                        If (Not (Me.ListPriceChangingEvent) Is Nothing) Then
                            RaiseEvent ListPriceChanging(Me, New ListPriceChangeEventArg(e))
                        End If
                    End If
                End If
            End If
        End Sub
        
        Protected Overrides Sub OnColumnChanged(ByVal e As System.Data.DataColumnChangeEventArgs)
            MyBase.OnColumnChanged(e)
            If (Me.SuspendValidation = true) Then
                Return
            End If
            If (e.Column.ColumnName Is "ProductID") Then
                If (Not (Me.ProductIDChangedEvent) Is Nothing) Then
                    RaiseEvent ProductIDChanged(Me, New ProductIDChangeEventArg(e))
                End If
            Else
                If (e.Column.ColumnName Is "Name") Then
                    If (Not (Me.NameChangedEvent) Is Nothing) Then
                        RaiseEvent NameChanged(Me, New NameChangeEventArg(e))
                    End If
                Else
                    If (e.Column.ColumnName Is "ListPrice") Then
                        If (Not (Me.ListPriceChangedEvent) Is Nothing) Then
                            RaiseEvent ListPriceChanged(Me, New ListPriceChangeEventArg(e))
                        End If
                    End If
                End If
            End If
        End Sub
        
        Public Overloads Sub AddGetProductsRow(ByVal row As GetProductsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddGetProductsRow(ByVal Name As String, ByVal ListPrice As Decimal) As GetProductsRow
            Dim rowGetProductsRow As GetProductsRow = CType(Me.NewRow,GetProductsRow)
            rowGetProductsRow.ItemArray = New Object() {Nothing, Name, ListPrice}
            Me.Rows.Add(rowGetProductsRow)
            Return rowGetProductsRow
        End Function
        
        Public Function FindByProductID(ByVal ProductID As Integer) As GetProductsRow
            Return CType(Me.Rows.Find(New Object() {ProductID}),GetProductsRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As GetProductsDataTable = CType(MyBase.Clone,GetProductsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New GetProductsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnProductID = MyBase.Columns("ProductID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnListPrice = MyBase.Columns("ListPrice")
        End Sub
        
        Private Sub InitClass()
            Me.columnProductID = New System.Data.DataColumn("ProductID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnProductID.ExtendedProperties.Add("Generator_ChangedEventName", "ProductIDChanged")
            Me.columnProductID.ExtendedProperties.Add("Generator_ChangingEventName", "ProductIDChanging")
            Me.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductID")
            Me.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductIDColumn")
            Me.columnProductID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductID")
            Me.columnProductID.ExtendedProperties.Add("Generator_DelegateName", "ProductIDChangeEventHandler")
            Me.columnProductID.ExtendedProperties.Add("Generator_EventArgName", "ProductIDChangeEventArg")
            Me.columnProductID.ExtendedProperties.Add("User_ColumnName", "ProductID")
            MyBase.Columns.Add(Me.columnProductID)
            Me.columnName = New System.Data.DataColumn("Name", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnName.ExtendedProperties.Add("Generator_ChangedEventName", "NameChanged")
            Me.columnName.ExtendedProperties.Add("Generator_ChangingEventName", "NameChanging")
            Me.columnName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Name")
            Me.columnName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "NameColumn")
            Me.columnName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnName")
            Me.columnName.ExtendedProperties.Add("Generator_DelegateName", "NameChangeEventHandler")
            Me.columnName.ExtendedProperties.Add("Generator_EventArgName", "NameChangeEventArg")
            Me.columnName.ExtendedProperties.Add("User_ColumnName", "Name")
            MyBase.Columns.Add(Me.columnName)
            Me.columnListPrice = New System.Data.DataColumn("ListPrice", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            Me.columnListPrice.ExtendedProperties.Add("Generator_ChangedEventName", "ListPriceChanged")
            Me.columnListPrice.ExtendedProperties.Add("Generator_ChangingEventName", "ListPriceChanging")
            Me.columnListPrice.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ListPrice")
            Me.columnListPrice.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ListPriceColumn")
            Me.columnListPrice.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnListPrice")
            Me.columnListPrice.ExtendedProperties.Add("Generator_DelegateName", "ListPriceChangeEventHandler")
            Me.columnListPrice.ExtendedProperties.Add("Generator_EventArgName", "ListPriceChangeEventArg")
            Me.columnListPrice.ExtendedProperties.Add("User_ColumnName", "ListPrice")
            MyBase.Columns.Add(Me.columnListPrice)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnProductID}, true))
            Me.columnProductID.AutoIncrement = true
            Me.columnProductID.AllowDBNull = false
            Me.columnProductID.ReadOnly = true
            Me.columnProductID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnListPrice.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "GetProductsRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "GetProductsRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "GetProductsRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation")
            Me.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation")
            Me.ExtendedProperties.Add("Generator_TableClassName", "GetProductsDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "GetProducts")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableGetProducts")
            Me.ExtendedProperties.Add("User_TableName", "GetProducts")
        End Sub
        
        Public Function NewGetProductsRow() As GetProductsRow
            Return CType(Me.NewRow,GetProductsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New GetProductsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GetProductsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GetProductsRowChangedEvent) Is Nothing) Then
                RaiseEvent GetProductsRowChanged(Me, New GetProductsRowChangeEvent(CType(e.Row,GetProductsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GetProductsRowChangingEvent) Is Nothing) Then
                RaiseEvent GetProductsRowChanging(Me, New GetProductsRowChangeEvent(CType(e.Row,GetProductsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GetProductsRowDeletedEvent) Is Nothing) Then
                RaiseEvent GetProductsRowDeleted(Me, New GetProductsRowChangeEvent(CType(e.Row,GetProductsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GetProductsRowDeletingEvent) Is Nothing) Then
                RaiseEvent GetProductsRowDeleting(Me, New GetProductsRowChangeEvent(CType(e.Row,GetProductsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveGetProductsRow(ByVal row As GetProductsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProductsDS = New ProductsDS
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GetProductsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub ProductIDChangeEventHandler(ByVal sender As GetProductsDataTable, ByVal e As ProductIDChangeEventArg)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ProductIDChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As GetProductsRow
                Get
                    Return CType(Me.evArgs.Row,GetProductsRow)
                End Get
            End Property
            
            Public ReadOnly Property ProductIDColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Integer
                Get
                    Return CType(Me.evArgs.ProposedValue,Integer)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Integer)
                End Set
            End Property
        End Class
        
        Public Delegate Sub NameChangeEventHandler(ByVal sender As GetProductsDataTable, ByVal e As NameChangeEventArg)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class NameChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As GetProductsRow
                Get
                    Return CType(Me.evArgs.Row,GetProductsRow)
                End Get
            End Property
            
            Public ReadOnly Property NameColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As String
                Get
                    Return CType(Me.evArgs.ProposedValue,String)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,String)
                End Set
            End Property
        End Class
        
        Public Delegate Sub ListPriceChangeEventHandler(ByVal sender As GetProductsDataTable, ByVal e As ListPriceChangeEventArg)
        
        <System.Diagnostics.DebuggerStepThrough()>  _
        Public Class ListPriceChangeEventArg
            Inherits System.EventArgs
            
            Private evArgs As System.Data.DataColumnChangeEventArgs
            
            Public Sub New(ByVal args As System.Data.DataColumnChangeEventArgs)
                MyBase.New
                Me.evArgs = args
            End Sub
            
            Public ReadOnly Property Row() As GetProductsRow
                Get
                    Return CType(Me.evArgs.Row,GetProductsRow)
                End Get
            End Property
            
            Public ReadOnly Property ListPriceColumn() As System.Data.DataColumn
                Get
                    Return Me.evArgs.Column
                End Get
            End Property
            
            Public Property ProposedValue() As Decimal
                Get
                    Return CType(Me.evArgs.ProposedValue,Decimal)
                End Get
                Set
                    Me.evArgs.ProposedValue = CType(value,Decimal)
                End Set
            End Property
        End Class
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetProductsRow
        Inherits System.Data.DataRow
        
        Private tableGetProducts As GetProductsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGetProducts = CType(Me.Table,GetProductsDataTable)
        End Sub
        
        Public Property ProductID() As Integer
            Get
                Return CType(Me(Me.tableGetProducts.ProductIDColumn),Integer)
            End Get
            Set
                Me(Me.tableGetProducts.ProductIDColumn) = value
            End Set
        End Property
        
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableGetProducts.NameColumn),String)
            End Get
            Set
                Me(Me.tableGetProducts.NameColumn) = value
            End Set
        End Property
        
        Public Property ListPrice() As Decimal
            Get
                Return CType(Me(Me.tableGetProducts.ListPriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableGetProducts.ListPriceColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class GetProductsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As GetProductsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As GetProductsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As GetProductsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Public Interface IGetProductsTableAdapter
    
    Function Fill(ByVal dataSet As ProductsDS) As Integer
    
    Function Fill(ByVal dataTable As ProductsDS.GetProductsDataTable) As Integer
    
    Function GetData() As ProductsDS.GetProductsDataTable
    
    Function Update(ByVal dataSet As ProductsDS) As Integer
    
    Function Update(ByVal dataTable As ProductsDS.GetProductsDataTable) As Integer
    
    Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
    
    Function Update(ByVal dataRow As System.Data.DataRow) As Integer
End Interface

<System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.ComponentModel.DataObjectAttribute(true)>  _
Partial Public Class GetProductsTableAdapter
    Inherits System.ComponentModel.Component
    Implements IGetProductsTableAdapter
    
    Private WithEvents m_adapter As System.Data.SqlClient.SqlDataAdapter
    
    Private m_selectCommandCollection() As System.Data.IDbCommand
    
    Private m_connection As System.Data.SqlClient.SqlConnection
    
    Private m_transaction As System.Data.SqlClient.SqlTransaction
    
    Private m_clearBeforeFill As Boolean
    
    Public Sub New()
        MyBase.New
        Me.InitClass
    End Sub
    
    Friend ReadOnly Property SelectCommandCollection() As System.Data.IDbCommand()
        Get
            Return Me.m_selectCommandCollection
        End Get
    End Property
    
    Friend ReadOnly Property Connection() As System.Data.SqlClient.SqlConnection
        Get
            Return Me.m_connection
        End Get
    End Property
    
    Friend Property Transaction() As System.Data.SqlClient.SqlTransaction
        Get
            Return Me.m_transaction
        End Get
        Set
            Dim oldTransaction As System.Data.SqlClient.SqlTransaction = Me.m_transaction
            Me.m_transaction = value
            Dim i As Integer = 0
            Do While (i < Me.m_selectCommandCollection.Length)
                If (CType(Me.m_selectCommandCollection(i),System.Data.SqlClient.SqlCommand).Transaction Is oldTransaction) Then
                    CType(Me.m_selectCommandCollection(i),System.Data.SqlClient.SqlCommand).Transaction = Me.m_transaction
                End If
                i = (i + 1)
            Loop
            If ((Not (Me.m_adapter) Is Nothing)  _
                        AndAlso (Not (Me.m_adapter.DeleteCommand) Is Nothing)) Then
                If (Me.m_adapter.DeleteCommand.Transaction Is oldTransaction) Then
                    Me.m_adapter.DeleteCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.m_adapter) Is Nothing)  _
                        AndAlso (Not (Me.m_adapter.InsertCommand) Is Nothing)) Then
                If (Me.m_adapter.InsertCommand.Transaction Is oldTransaction) Then
                    Me.m_adapter.InsertCommand.Transaction = Me.m_transaction
                End If
            End If
            If ((Not (Me.m_adapter) Is Nothing)  _
                        AndAlso (Not (Me.m_adapter.UpdateCommand) Is Nothing)) Then
                If (Me.m_adapter.UpdateCommand.Transaction Is oldTransaction) Then
                    Me.m_adapter.UpdateCommand.Transaction = Me.m_transaction
                End If
            End If
        End Set
    End Property
    
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me.m_clearBeforeFill
        End Get
        Set
            Me.m_clearBeforeFill = value
        End Set
    End Property
    
    Private Sub InitClass()
        Me.m_connection = New System.Data.SqlClient.SqlConnection
        Me.m_connection.ConnectionString = "Server=localhost;Integrated Security=True;Database=AdventureWorks"
        Me.m_clearBeforeFill = true
        Me.m_adapter = New System.Data.SqlClient.SqlDataAdapter
        Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
        tableMapping.SourceTable = "GetProducts"
        tableMapping.DataSetTable = "GetProducts"
        tableMapping.ColumnMappings.Add("ProductID", "ProductID")
        tableMapping.ColumnMappings.Add("Name", "Name")
        tableMapping.ColumnMappings.Add("ListPrice", "ListPrice")
        Me.m_adapter.TableMappings.Add(tableMapping)
        Me.m_selectCommandCollection = New System.Data.IDbCommand(0) {}
        Me.m_selectCommandCollection(0) = New System.Data.SqlClient.SqlCommand
        CType(Me.m_selectCommandCollection(0),System.Data.SqlClient.SqlCommand).Connection = Me.Connection
        CType(Me.m_selectCommandCollection(0),System.Data.SqlClient.SqlCommand).CommandText = "Production.GetProducts"
        CType(Me.m_selectCommandCollection(0),System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
        CType(Me.m_selectCommandCollection(0),System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        Me.m_adapter.SelectCommand = New System.Data.SqlClient.SqlCommand
        CType(Me.m_adapter.SelectCommand,System.Data.SqlClient.SqlCommand).Connection = Me.Connection
        CType(Me.m_adapter.SelectCommand,System.Data.SqlClient.SqlCommand).CommandText = "Production.GetProducts"
        CType(Me.m_adapter.SelectCommand,System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
        CType(Me.m_adapter.SelectCommand,System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        Me.m_adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
        CType(Me.m_adapter.UpdateCommand,System.Data.SqlClient.SqlCommand).Connection = Me.Connection
        CType(Me.m_adapter.UpdateCommand,System.Data.SqlClient.SqlCommand).CommandText = "Production.UpdateProduct"
        CType(Me.m_adapter.UpdateCommand,System.Data.SqlClient.SqlCommand).CommandType = System.Data.CommandType.StoredProcedure
        CType(Me.m_adapter.UpdateCommand,System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        CType(Me.m_adapter.UpdateCommand,System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@productid", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ProductID", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        CType(Me.m_adapter.UpdateCommand,System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 40, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        CType(Me.m_adapter.UpdateCommand,System.Data.SqlClient.SqlCommand).Parameters.Add(New System.Data.SqlClient.SqlParameter("@listprice", System.Data.SqlDbType.Money, 8, System.Data.ParameterDirection.Input, 19, 4, "ListPrice", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
    End Sub
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)>  _
    Public Overloads Overridable Function Fill(ByVal dataSet As ProductsDS) As Integer Implements IGetProductsTableAdapter.Fill
        Me.m_adapter.SelectCommand = CType(Me.m_selectCommandCollection(0),System.Data.SqlClient.SqlCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataSet.GetProducts.Clear
        End If
        Me.m_adapter.Fill(dataSet, "GetProducts")
        If (Me.m_adapter.SelectCommand.Parameters(0).Value.GetType Is GetType(System.DBNull)) Then
            Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", Nothing)
        Else
            Return CType(Me.m_adapter.SelectCommand.Parameters(0).Value,Integer)
        End If
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
    Public Overloads Overridable Function Fill(ByVal dataTable As ProductsDS.GetProductsDataTable) As Integer Implements IGetProductsTableAdapter.Fill
        Me.m_adapter.SelectCommand = CType(Me.m_selectCommandCollection(0),System.Data.SqlClient.SqlCommand)
        If (Me.m_clearBeforeFill = true) Then
            dataTable.Clear
        End If
        Me.m_adapter.Fill(dataTable)
        If (Me.m_adapter.SelectCommand.Parameters(0).Value.GetType Is GetType(System.DBNull)) Then
            Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", Nothing)
        Else
            Return CType(Me.m_adapter.SelectCommand.Parameters(0).Value,Integer)
        End If
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
    Public Overloads Overridable Function GetData() As ProductsDS.GetProductsDataTable Implements IGetProductsTableAdapter.GetData
        Me.m_adapter.SelectCommand = CType(Me.m_selectCommandCollection(0),System.Data.SqlClient.SqlCommand)
        Dim dataTable As ProductsDS.GetProductsDataTable = New ProductsDS.GetProductsDataTable
        Me.m_adapter.Fill(dataTable)
        Return dataTable
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)>  _
    Public Overloads Overridable Function Update(ByVal dataSet As ProductsDS) As Integer Implements IGetProductsTableAdapter.Update
        Return Me.m_adapter.Update(dataSet, "GetProducts")
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)>  _
    Public Overloads Overridable Function Update(ByVal dataTable As ProductsDS.GetProductsDataTable) As Integer Implements IGetProductsTableAdapter.Update
        Return Me.m_adapter.Update(dataTable)
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)>  _
    Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer Implements IGetProductsTableAdapter.Update
        Return Me.m_adapter.Update(dataRows)
    End Function
    
    <System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)>  _
    Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer Implements IGetProductsTableAdapter.Update
        Return Me.m_adapter.Update(New System.Data.DataRow() {dataRow})
    End Function
End Class
