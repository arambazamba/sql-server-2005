//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40426.20
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WindowsDataClient {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ProductsDS")]
    public partial class ProductsDS : System.Data.DataSet {
        
        private GetProductsDataTable tableGetProducts;
        
        public ProductsDS() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected ProductsDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["GetProducts"] != null)) {
                    base.Tables.Add(new GetProductsDataTable(ds.Tables["GetProducts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        public GetProductsDataTable GetProducts {
            get {
                return this.tableGetProducts;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            ProductsDS cln = ((ProductsDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["GetProducts"] != null)) {
                base.Tables.Add(new GetProductsDataTable(ds.Tables["GetProducts"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableGetProducts = ((GetProductsDataTable)(base.Tables["GetProducts"]));
            if ((initTable == true)) {
                if ((this.tableGetProducts != null)) {
                    this.tableGetProducts.InitVars();
                }
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ProductsDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProductsDS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableGetProducts = new GetProductsDataTable();
            base.Tables.Add(this.tableGetProducts);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "ProductsDS");
            this.ExtendedProperties.Add("User_DataSetName", "ProductsDS");
        }
        
        private bool ShouldSerializeGetProducts() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ProductsDS ds = new ProductsDS();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new System.Decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new System.Decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = System.Decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void GetProductsRowChangeEventHandler(object sender, GetProductsRowChangeEvent e);
        
        [System.Serializable()]
        [System.Diagnostics.DebuggerStepThrough()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GetProductsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnListPrice;
            
            private bool m_suspendValidation = false;
            
            public GetProductsDataTable() {
                this.TableName = "GetProducts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal GetProductsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected GetProductsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal System.Data.DataColumn ListPriceColumn {
                get {
                    return this.columnListPrice;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public GetProductsRow this[int index] {
                get {
                    return ((GetProductsRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event ProductIDChangeEventHandler ProductIDChanging;
            
            public event ProductIDChangeEventHandler ProductIDChanged;
            
            public event NameChangeEventHandler NameChanging;
            
            public event NameChangeEventHandler NameChanged;
            
            public event ListPriceChangeEventHandler ListPriceChanging;
            
            public event ListPriceChangeEventHandler ListPriceChanged;
            
            public event GetProductsRowChangeEventHandler GetProductsRowChanged;
            
            public event GetProductsRowChangeEventHandler GetProductsRowChanging;
            
            public event GetProductsRowChangeEventHandler GetProductsRowDeleted;
            
            public event GetProductsRowChangeEventHandler GetProductsRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ProductID")) {
                    if ((this.ProductIDChanging != null)) {
                        this.ProductIDChanging(this, new ProductIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "Name")) {
                        if ((this.NameChanging != null)) {
                            this.NameChanging(this, new NameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ListPrice")) {
                            if ((this.ListPriceChanging != null)) {
                                this.ListPriceChanging(this, new ListPriceChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ProductID")) {
                    if ((this.ProductIDChanged != null)) {
                        this.ProductIDChanged(this, new ProductIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "Name")) {
                        if ((this.NameChanged != null)) {
                            this.NameChanged(this, new NameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ListPrice")) {
                            if ((this.ListPriceChanged != null)) {
                                this.ListPriceChanged(this, new ListPriceChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddGetProductsRow(GetProductsRow row) {
                this.Rows.Add(row);
            }
            
            public GetProductsRow AddGetProductsRow(string Name, System.Decimal ListPrice) {
                GetProductsRow rowGetProductsRow = ((GetProductsRow)(this.NewRow()));
                rowGetProductsRow.ItemArray = new object[] {
                        null,
                        Name,
                        ListPrice};
                this.Rows.Add(rowGetProductsRow);
                return rowGetProductsRow;
            }
            
            public GetProductsRow FindByProductID(int ProductID) {
                return ((GetProductsRow)(this.Rows.Find(new object[] {
                            ProductID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                GetProductsDataTable cln = ((GetProductsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new GetProductsDataTable();
            }
            
            internal void InitVars() {
                this.columnProductID = base.Columns["ProductID"];
                this.columnName = base.Columns["Name"];
                this.columnListPrice = base.Columns["ListPrice"];
            }
            
            private void InitClass() {
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.columnProductID.ExtendedProperties.Add("Generator_ChangedEventName", "ProductIDChanged");
                this.columnProductID.ExtendedProperties.Add("Generator_ChangingEventName", "ProductIDChanging");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductIDColumn");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_DelegateName", "ProductIDChangeEventHandler");
                this.columnProductID.ExtendedProperties.Add("Generator_EventArgName", "ProductIDChangeEventArg");
                this.columnProductID.ExtendedProperties.Add("User_ColumnName", "ProductID");
                base.Columns.Add(this.columnProductID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.columnName.ExtendedProperties.Add("Generator_ChangedEventName", "NameChanged");
                this.columnName.ExtendedProperties.Add("Generator_ChangingEventName", "NameChanging");
                this.columnName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Name");
                this.columnName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "NameColumn");
                this.columnName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnName");
                this.columnName.ExtendedProperties.Add("Generator_DelegateName", "NameChangeEventHandler");
                this.columnName.ExtendedProperties.Add("Generator_EventArgName", "NameChangeEventArg");
                this.columnName.ExtendedProperties.Add("User_ColumnName", "Name");
                base.Columns.Add(this.columnName);
                this.columnListPrice = new System.Data.DataColumn("ListPrice", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.columnListPrice.ExtendedProperties.Add("Generator_ChangedEventName", "ListPriceChanged");
                this.columnListPrice.ExtendedProperties.Add("Generator_ChangingEventName", "ListPriceChanging");
                this.columnListPrice.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ListPrice");
                this.columnListPrice.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ListPriceColumn");
                this.columnListPrice.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnListPrice");
                this.columnListPrice.ExtendedProperties.Add("Generator_DelegateName", "ListPriceChangeEventHandler");
                this.columnListPrice.ExtendedProperties.Add("Generator_EventArgName", "ListPriceChangeEventArg");
                this.columnListPrice.ExtendedProperties.Add("User_ColumnName", "ListPrice");
                base.Columns.Add(this.columnListPrice);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnProductID}, true));
                this.columnProductID.AutoIncrement = true;
                this.columnProductID.AllowDBNull = false;
                this.columnProductID.ReadOnly = true;
                this.columnProductID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnListPrice.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "GetProductsRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "GetProductsRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "GetProductsRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "GetProductsDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "GetProducts");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableGetProducts");
                this.ExtendedProperties.Add("User_TableName", "GetProducts");
            }
            
            public GetProductsRow NewGetProductsRow() {
                return ((GetProductsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new GetProductsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(GetProductsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GetProductsRowChanged != null)) {
                    this.GetProductsRowChanged(this, new GetProductsRowChangeEvent(((GetProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GetProductsRowChanging != null)) {
                    this.GetProductsRowChanging(this, new GetProductsRowChangeEvent(((GetProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GetProductsRowDeleted != null)) {
                    this.GetProductsRowDeleted(this, new GetProductsRowChangeEvent(((GetProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GetProductsRowDeleting != null)) {
                    this.GetProductsRowDeleting(this, new GetProductsRowChangeEvent(((GetProductsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveGetProductsRow(GetProductsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ProductsDS ds = new ProductsDS();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new System.Decimal(0);
                any1.MaxOccurs = System.Decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new System.Decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GetProductsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void ProductIDChangeEventHandler(GetProductsDataTable sender, ProductIDChangeEventArg e);
            
            [System.Diagnostics.DebuggerStepThrough()]
            public class ProductIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ProductIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public GetProductsRow Row {
                    get {
                        return ((GetProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ProductIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void NameChangeEventHandler(GetProductsDataTable sender, NameChangeEventArg e);
            
            [System.Diagnostics.DebuggerStepThrough()]
            public class NameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public NameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public GetProductsRow Row {
                    get {
                        return ((GetProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn NameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ListPriceChangeEventHandler(GetProductsDataTable sender, ListPriceChangeEventArg e);
            
            [System.Diagnostics.DebuggerStepThrough()]
            public class ListPriceChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ListPriceChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public GetProductsRow Row {
                    get {
                        return ((GetProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ListPriceColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.Decimal ProposedValue {
                    get {
                        return ((System.Decimal)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.Decimal)(value));
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetProductsRow : System.Data.DataRow {
            
            private GetProductsDataTable tableGetProducts;
            
            internal GetProductsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGetProducts = ((GetProductsDataTable)(this.Table));
            }
            
            public int ProductID {
                get {
                    return ((int)(this[this.tableGetProducts.ProductIDColumn]));
                }
                set {
                    this[this.tableGetProducts.ProductIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableGetProducts.NameColumn]));
                }
                set {
                    this[this.tableGetProducts.NameColumn] = value;
                }
            }
            
            public System.Decimal ListPrice {
                get {
                    return ((System.Decimal)(this[this.tableGetProducts.ListPriceColumn]));
                }
                set {
                    this[this.tableGetProducts.ListPriceColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class GetProductsRowChangeEvent : System.EventArgs {
            
            private GetProductsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public GetProductsRowChangeEvent(GetProductsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public GetProductsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    public interface IGetProductsTableAdapter {
        
        int Fill(ProductsDS dataSet);
        
        int Fill(ProductsDS.GetProductsDataTable dataTable);
        
        ProductsDS.GetProductsDataTable GetData();
        
        int Update(ProductsDS dataSet);
        
        int Update(ProductsDS.GetProductsDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public partial class GetProductsTableAdapter : System.ComponentModel.Component, IGetProductsTableAdapter {
        
        private System.Data.SqlClient.SqlDataAdapter m_adapter;
        
        private System.Data.IDbCommand[] m_selectCommandCollection;
        
        private System.Data.SqlClient.SqlConnection m_connection;
        
        private System.Data.SqlClient.SqlTransaction m_transaction;
        
        private bool m_clearBeforeFill;
        
        public GetProductsTableAdapter() {
            this.InitClass();
        }
        
        internal System.Data.IDbCommand[] SelectCommandCollection {
            get {
                return this.m_selectCommandCollection;
            }
        }
        
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                return this.m_connection;
            }
        }
        
        internal System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.SqlClient.SqlTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.m_selectCommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.m_adapter != null) 
                            && (this.m_adapter.DeleteCommand != null))) {
                    if ((this.m_adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.m_adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.m_adapter != null) 
                            && (this.m_adapter.InsertCommand != null))) {
                    if ((this.m_adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.m_adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.m_adapter != null) 
                            && (this.m_adapter.UpdateCommand != null))) {
                    if ((this.m_adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.m_adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitClass() {
            this.m_connection = new System.Data.SqlClient.SqlConnection();
            this.m_connection.ConnectionString = "Server=localhost;Integrated Security=True;Database=AdventureWorks";
            this.m_clearBeforeFill = true;
            this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "GetProducts";
            tableMapping.DataSetTable = "GetProducts";
            tableMapping.ColumnMappings.Add("ProductID", "ProductID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("ListPrice", "ListPrice");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_selectCommandCollection = new System.Data.IDbCommand[1];
            this.m_selectCommandCollection[0] = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[0])).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[0])).CommandText = "Production.GetProducts";
            ((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[0])).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[0])).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.SelectCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandText = "Production.GetProducts";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.SelectCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandText = "Production.UpdateProduct";
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.StoredProcedure;
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@productid", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, "ProductID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@name", System.Data.SqlDbType.NVarChar, 40, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            ((System.Data.SqlClient.SqlCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.SqlClient.SqlParameter("@listprice", System.Data.SqlDbType.Money, 8, System.Data.ParameterDirection.Input, 19, 4, "ListPrice", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int Fill(ProductsDS dataSet) {
            this.m_adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.GetProducts.Clear();
            }
            this.m_adapter.Fill(dataSet, "GetProducts");
            if ((this.m_adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", null);
            }
            else {
                return ((int)(this.m_adapter.SelectCommand.Parameters[0].Value));
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProductsDS.GetProductsDataTable dataTable) {
            this.m_adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            this.m_adapter.Fill(dataTable);
            if ((this.m_adapter.SelectCommand.Parameters[0].Value.GetType() == typeof(System.DBNull))) {
                throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", null);
            }
            else {
                return ((int)(this.m_adapter.SelectCommand.Parameters[0].Value));
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProductsDS.GetProductsDataTable GetData() {
            this.m_adapter.SelectCommand = ((System.Data.SqlClient.SqlCommand)(this.m_selectCommandCollection[0]));
            ProductsDS.GetProductsDataTable dataTable = new ProductsDS.GetProductsDataTable();
            this.m_adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Update(ProductsDS dataSet) {
            return this.m_adapter.Update(dataSet, "GetProducts");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Update(ProductsDS.GetProductsDataTable dataTable) {
            return this.m_adapter.Update(dataTable);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.m_adapter.Update(dataRows);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.m_adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
}
